plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    jcenter()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

    implementation 'com.google.guava:guava:29.0-jre'

    compile group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.4.30.Final'
    compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.3'
    compile group: 'com.github.javafaker', name: 'javafaker', version: '0.15'
    compile group: 'commons-io', name: 'commons-io', version: '2.8.0'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.20'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.7'
}

application {
    // Define the main class for the application.
    mainClass = 'edu.it.App'
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

jar {
    manifest {
        attributes "Main-Class": "edu.it.App"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
